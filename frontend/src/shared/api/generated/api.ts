/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeveloperDto,
  GameDto,
  GenreDto,
  GetAll1Params,
  GetAll2Params,
  GetAll3Params,
  GetAllParams,
  PlatformDto
} from './types';





export const getById = (
  id: string, options?: AxiosRequestConfig
): Promise<AxiosResponse<PlatformDto>> => {


  return axios.get(
    `/api/v1/platforms/${id}`, options
  );
}


export const getGetByIdQueryKey = (id?: string,) => {
  return [`/api/v1/platforms/${id}`] as const;
}


export const getGetByIdQueryOptions = <TData = Awaited<ReturnType<typeof getById>>, TError = AxiosError<unknown>>(id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByIdQueryKey(id);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById>>> = ({ signal }) => getById(id, { signal, ...axiosOptions });





  return { queryKey, queryFn, enabled: !!(id), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getById>>>
export type GetByIdQueryError = AxiosError<unknown>


export function useGetById<TData = Awaited<ReturnType<typeof getById>>, TError = AxiosError<unknown>>(
  id: string, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>> & Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        Awaited<ReturnType<typeof getById>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetById<TData = Awaited<ReturnType<typeof getById>>, TError = AxiosError<unknown>>(
  id: string, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>> & Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        Awaited<ReturnType<typeof getById>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetById<TData = Awaited<ReturnType<typeof getById>>, TError = AxiosError<unknown>>(
  id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetById<TData = Awaited<ReturnType<typeof getById>>, TError = AxiosError<unknown>>(
  id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetByIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const update = (
  id: string,
  platformDto: PlatformDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<PlatformDto>> => {


  return axios.put(
    `/api/v1/platforms/${id}`,
    platformDto, options
  );
}



export const getUpdateMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof update>>, TError, { id: string; data: PlatformDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof update>>, TError, { id: string; data: PlatformDto }, TContext> => {

  const mutationKey = ['update'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof update>>, { id: string; data: PlatformDto }> = (props) => {
    const { id, data } = props ?? {};

    return update(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type UpdateMutationResult = NonNullable<Awaited<ReturnType<typeof update>>>
export type UpdateMutationBody = PlatformDto
export type UpdateMutationError = AxiosError<unknown>

export const useUpdate = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof update>>, TError, { id: string; data: PlatformDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof update>>,
      TError,
      { id: string; data: PlatformDto },
      TContext
    > => {

  const mutationOptions = getUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const _delete = (
  id: string, options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {


  return axios.delete(
    `/api/v1/platforms/${id}`, options
  );
}



export const getDeleteMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError, { id: string }, TContext> => {

  const mutationKey = ['_delete'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof _delete>>, { id: string }> = (props) => {
    const { id } = props ?? {};

    return _delete(id, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type _DeleteMutationResult = NonNullable<Awaited<ReturnType<typeof _delete>>>

export type _DeleteMutationError = AxiosError<unknown>

export const useDelete = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof _delete>>,
      TError,
      { id: string },
      TContext
    > => {

  const mutationOptions = getDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const partialUpdate = (
  id: string,
  platformDto: PlatformDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<PlatformDto>> => {


  return axios.patch(
    `/api/v1/platforms/${id}`,
    platformDto, options
  );
}



export const getPartialUpdateMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof partialUpdate>>, TError, { id: string; data: PlatformDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof partialUpdate>>, TError, { id: string; data: PlatformDto }, TContext> => {

  const mutationKey = ['partialUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdate>>, { id: string; data: PlatformDto }> = (props) => {
    const { id, data } = props ?? {};

    return partialUpdate(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdate>>>
export type PartialUpdateMutationBody = PlatformDto
export type PartialUpdateMutationError = AxiosError<unknown>

export const usePartialUpdate = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof partialUpdate>>, TError, { id: string; data: PlatformDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof partialUpdate>>,
      TError,
      { id: string; data: PlatformDto },
      TContext
    > => {

  const mutationOptions = getPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const getById1 = (
  id: string, options?: AxiosRequestConfig
): Promise<AxiosResponse<GenreDto>> => {


  return axios.get(
    `/api/v1/genres/${id}`, options
  );
}


export const getGetById1QueryKey = (id?: string,) => {
  return [`/api/v1/genres/${id}`] as const;
}


export const getGetById1QueryOptions = <TData = Awaited<ReturnType<typeof getById1>>, TError = AxiosError<unknown>>(id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById1>>, TError, TData>>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetById1QueryKey(id);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById1>>> = ({ signal }) => getById1(id, { signal, ...axiosOptions });





  return { queryKey, queryFn, enabled: !!(id), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getById1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetById1QueryResult = NonNullable<Awaited<ReturnType<typeof getById1>>>
export type GetById1QueryError = AxiosError<unknown>


export function useGetById1<TData = Awaited<ReturnType<typeof getById1>>, TError = AxiosError<unknown>>(
  id: string, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById1>>, TError, TData>> & Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getById1>>,
        TError,
        Awaited<ReturnType<typeof getById1>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetById1<TData = Awaited<ReturnType<typeof getById1>>, TError = AxiosError<unknown>>(
  id: string, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById1>>, TError, TData>> & Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getById1>>,
        TError,
        Awaited<ReturnType<typeof getById1>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetById1<TData = Awaited<ReturnType<typeof getById1>>, TError = AxiosError<unknown>>(
  id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById1>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetById1<TData = Awaited<ReturnType<typeof getById1>>, TError = AxiosError<unknown>>(
  id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById1>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetById1QueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const update1 = (
  id: string,
  genreDto: GenreDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<GenreDto>> => {


  return axios.put(
    `/api/v1/genres/${id}`,
    genreDto, options
  );
}



export const getUpdate1MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof update1>>, TError, { id: string; data: GenreDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof update1>>, TError, { id: string; data: GenreDto }, TContext> => {

  const mutationKey = ['update1'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof update1>>, { id: string; data: GenreDto }> = (props) => {
    const { id, data } = props ?? {};

    return update1(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type Update1MutationResult = NonNullable<Awaited<ReturnType<typeof update1>>>
export type Update1MutationBody = GenreDto
export type Update1MutationError = AxiosError<unknown>

export const useUpdate1 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof update1>>, TError, { id: string; data: GenreDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof update1>>,
      TError,
      { id: string; data: GenreDto },
      TContext
    > => {

  const mutationOptions = getUpdate1MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const delete1 = (
  id: string, options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {


  return axios.delete(
    `/api/v1/genres/${id}`, options
  );
}



export const getDelete1MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof delete1>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof delete1>>, TError, { id: string }, TContext> => {

  const mutationKey = ['delete1'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof delete1>>, { id: string }> = (props) => {
    const { id } = props ?? {};

    return delete1(id, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type Delete1MutationResult = NonNullable<Awaited<ReturnType<typeof delete1>>>

export type Delete1MutationError = AxiosError<unknown>

export const useDelete1 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof delete1>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof delete1>>,
      TError,
      { id: string },
      TContext
    > => {

  const mutationOptions = getDelete1MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const partialUpdate1 = (
  id: string,
  genreDto: GenreDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<GenreDto>> => {


  return axios.patch(
    `/api/v1/genres/${id}`,
    genreDto, options
  );
}



export const getPartialUpdate1MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof partialUpdate1>>, TError, { id: string; data: GenreDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof partialUpdate1>>, TError, { id: string; data: GenreDto }, TContext> => {

  const mutationKey = ['partialUpdate1'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdate1>>, { id: string; data: GenreDto }> = (props) => {
    const { id, data } = props ?? {};

    return partialUpdate1(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PartialUpdate1MutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdate1>>>
export type PartialUpdate1MutationBody = GenreDto
export type PartialUpdate1MutationError = AxiosError<unknown>

export const usePartialUpdate1 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof partialUpdate1>>, TError, { id: string; data: GenreDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof partialUpdate1>>,
      TError,
      { id: string; data: GenreDto },
      TContext
    > => {

  const mutationOptions = getPartialUpdate1MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const getById2 = (
  id: string, options?: AxiosRequestConfig
): Promise<AxiosResponse<GameDto>> => {


  return axios.get(
    `/api/v1/games/${id}`, options
  );
}


export const getGetById2QueryKey = (id?: string,) => {
  return [`/api/v1/games/${id}`] as const;
}


export const getGetById2QueryOptions = <TData = Awaited<ReturnType<typeof getById2>>, TError = AxiosError<unknown>>(id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById2>>, TError, TData>>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetById2QueryKey(id);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById2>>> = ({ signal }) => getById2(id, { signal, ...axiosOptions });





  return { queryKey, queryFn, enabled: !!(id), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getById2>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetById2QueryResult = NonNullable<Awaited<ReturnType<typeof getById2>>>
export type GetById2QueryError = AxiosError<unknown>


export function useGetById2<TData = Awaited<ReturnType<typeof getById2>>, TError = AxiosError<unknown>>(
  id: string, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById2>>, TError, TData>> & Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getById2>>,
        TError,
        Awaited<ReturnType<typeof getById2>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetById2<TData = Awaited<ReturnType<typeof getById2>>, TError = AxiosError<unknown>>(
  id: string, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById2>>, TError, TData>> & Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getById2>>,
        TError,
        Awaited<ReturnType<typeof getById2>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetById2<TData = Awaited<ReturnType<typeof getById2>>, TError = AxiosError<unknown>>(
  id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById2>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetById2<TData = Awaited<ReturnType<typeof getById2>>, TError = AxiosError<unknown>>(
  id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById2>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetById2QueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const update2 = (
  id: string,
  gameDto: GameDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<GameDto>> => {


  return axios.put(
    `/api/v1/games/${id}`,
    gameDto, options
  );
}



export const getUpdate2MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof update2>>, TError, { id: string; data: GameDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof update2>>, TError, { id: string; data: GameDto }, TContext> => {

  const mutationKey = ['update2'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof update2>>, { id: string; data: GameDto }> = (props) => {
    const { id, data } = props ?? {};

    return update2(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type Update2MutationResult = NonNullable<Awaited<ReturnType<typeof update2>>>
export type Update2MutationBody = GameDto
export type Update2MutationError = AxiosError<unknown>

export const useUpdate2 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof update2>>, TError, { id: string; data: GameDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof update2>>,
      TError,
      { id: string; data: GameDto },
      TContext
    > => {

  const mutationOptions = getUpdate2MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const delete2 = (
  id: string, options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {


  return axios.delete(
    `/api/v1/games/${id}`, options
  );
}



export const getDelete2MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof delete2>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof delete2>>, TError, { id: string }, TContext> => {

  const mutationKey = ['delete2'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof delete2>>, { id: string }> = (props) => {
    const { id } = props ?? {};

    return delete2(id, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type Delete2MutationResult = NonNullable<Awaited<ReturnType<typeof delete2>>>

export type Delete2MutationError = AxiosError<unknown>

export const useDelete2 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof delete2>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof delete2>>,
      TError,
      { id: string },
      TContext
    > => {

  const mutationOptions = getDelete2MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const partialUpdate2 = (
  id: string,
  gameDto: GameDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<GameDto>> => {


  return axios.patch(
    `/api/v1/games/${id}`,
    gameDto, options
  );
}



export const getPartialUpdate2MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof partialUpdate2>>, TError, { id: string; data: GameDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof partialUpdate2>>, TError, { id: string; data: GameDto }, TContext> => {

  const mutationKey = ['partialUpdate2'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdate2>>, { id: string; data: GameDto }> = (props) => {
    const { id, data } = props ?? {};

    return partialUpdate2(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PartialUpdate2MutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdate2>>>
export type PartialUpdate2MutationBody = GameDto
export type PartialUpdate2MutationError = AxiosError<unknown>

export const usePartialUpdate2 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof partialUpdate2>>, TError, { id: string; data: GameDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof partialUpdate2>>,
      TError,
      { id: string; data: GameDto },
      TContext
    > => {

  const mutationOptions = getPartialUpdate2MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const getById3 = (
  id: string, options?: AxiosRequestConfig
): Promise<AxiosResponse<DeveloperDto>> => {


  return axios.get(
    `/api/v1/developers/${id}`, options
  );
}


export const getGetById3QueryKey = (id?: string,) => {
  return [`/api/v1/developers/${id}`] as const;
}


export const getGetById3QueryOptions = <TData = Awaited<ReturnType<typeof getById3>>, TError = AxiosError<unknown>>(id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById3>>, TError, TData>>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetById3QueryKey(id);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById3>>> = ({ signal }) => getById3(id, { signal, ...axiosOptions });





  return { queryKey, queryFn, enabled: !!(id), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getById3>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetById3QueryResult = NonNullable<Awaited<ReturnType<typeof getById3>>>
export type GetById3QueryError = AxiosError<unknown>


export function useGetById3<TData = Awaited<ReturnType<typeof getById3>>, TError = AxiosError<unknown>>(
  id: string, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById3>>, TError, TData>> & Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getById3>>,
        TError,
        Awaited<ReturnType<typeof getById3>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetById3<TData = Awaited<ReturnType<typeof getById3>>, TError = AxiosError<unknown>>(
  id: string, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById3>>, TError, TData>> & Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getById3>>,
        TError,
        Awaited<ReturnType<typeof getById3>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetById3<TData = Awaited<ReturnType<typeof getById3>>, TError = AxiosError<unknown>>(
  id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById3>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetById3<TData = Awaited<ReturnType<typeof getById3>>, TError = AxiosError<unknown>>(
  id: string, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById3>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetById3QueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const update3 = (
  id: string,
  developerDto: DeveloperDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<DeveloperDto>> => {


  return axios.put(
    `/api/v1/developers/${id}`,
    developerDto, options
  );
}



export const getUpdate3MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof update3>>, TError, { id: string; data: DeveloperDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof update3>>, TError, { id: string; data: DeveloperDto }, TContext> => {

  const mutationKey = ['update3'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof update3>>, { id: string; data: DeveloperDto }> = (props) => {
    const { id, data } = props ?? {};

    return update3(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type Update3MutationResult = NonNullable<Awaited<ReturnType<typeof update3>>>
export type Update3MutationBody = DeveloperDto
export type Update3MutationError = AxiosError<unknown>

export const useUpdate3 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof update3>>, TError, { id: string; data: DeveloperDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof update3>>,
      TError,
      { id: string; data: DeveloperDto },
      TContext
    > => {

  const mutationOptions = getUpdate3MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const delete3 = (
  id: string, options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {


  return axios.delete(
    `/api/v1/developers/${id}`, options
  );
}



export const getDelete3MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof delete3>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof delete3>>, TError, { id: string }, TContext> => {

  const mutationKey = ['delete3'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof delete3>>, { id: string }> = (props) => {
    const { id } = props ?? {};

    return delete3(id, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type Delete3MutationResult = NonNullable<Awaited<ReturnType<typeof delete3>>>

export type Delete3MutationError = AxiosError<unknown>

export const useDelete3 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof delete3>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof delete3>>,
      TError,
      { id: string },
      TContext
    > => {

  const mutationOptions = getDelete3MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const partialUpdate3 = (
  id: string,
  developerDto: DeveloperDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<DeveloperDto>> => {


  return axios.patch(
    `/api/v1/developers/${id}`,
    developerDto, options
  );
}



export const getPartialUpdate3MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof partialUpdate3>>, TError, { id: string; data: DeveloperDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof partialUpdate3>>, TError, { id: string; data: DeveloperDto }, TContext> => {

  const mutationKey = ['partialUpdate3'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdate3>>, { id: string; data: DeveloperDto }> = (props) => {
    const { id, data } = props ?? {};

    return partialUpdate3(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PartialUpdate3MutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdate3>>>
export type PartialUpdate3MutationBody = DeveloperDto
export type PartialUpdate3MutationError = AxiosError<unknown>

export const usePartialUpdate3 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof partialUpdate3>>, TError, { id: string; data: DeveloperDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof partialUpdate3>>,
      TError,
      { id: string; data: DeveloperDto },
      TContext
    > => {

  const mutationOptions = getPartialUpdate3MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const getAll = (
  params: GetAllParams, options?: AxiosRequestConfig
): Promise<AxiosResponse<PlatformDto[]>> => {


  return axios.get(
    `/api/v1/platforms`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}


export const getGetAllQueryKey = (params?: GetAllParams,) => {
  return [`/api/v1/platforms`, ...(params ? [params] : [])] as const;
}


export const getGetAllQueryOptions = <TData = Awaited<ReturnType<typeof getAll>>, TError = AxiosError<unknown>>(params: GetAllParams, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllQueryKey(params);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll>>> = ({ signal }) => getAll(params, { signal, ...axiosOptions });





  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllQueryResult = NonNullable<Awaited<ReturnType<typeof getAll>>>
export type GetAllQueryError = AxiosError<unknown>


export function useGetAll<TData = Awaited<ReturnType<typeof getAll>>, TError = AxiosError<unknown>>(
  params: GetAllParams, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>> & Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAll>>,
        TError,
        Awaited<ReturnType<typeof getAll>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll<TData = Awaited<ReturnType<typeof getAll>>, TError = AxiosError<unknown>>(
  params: GetAllParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>> & Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAll>>,
        TError,
        Awaited<ReturnType<typeof getAll>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll<TData = Awaited<ReturnType<typeof getAll>>, TError = AxiosError<unknown>>(
  params: GetAllParams, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAll<TData = Awaited<ReturnType<typeof getAll>>, TError = AxiosError<unknown>>(
  params: GetAllParams, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const create = (
  platformDto: PlatformDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<PlatformDto>> => {


  return axios.post(
    `/api/v1/platforms`,
    platformDto, options
  );
}



export const getCreateMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof create>>, TError, { data: PlatformDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof create>>, TError, { data: PlatformDto }, TContext> => {

  const mutationKey = ['create'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof create>>, { data: PlatformDto }> = (props) => {
    const { data } = props ?? {};

    return create(data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type CreateMutationResult = NonNullable<Awaited<ReturnType<typeof create>>>
export type CreateMutationBody = PlatformDto
export type CreateMutationError = AxiosError<unknown>

export const useCreate = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof create>>, TError, { data: PlatformDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof create>>,
      TError,
      { data: PlatformDto },
      TContext
    > => {

  const mutationOptions = getCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const getAll1 = (
  params: GetAll1Params, options?: AxiosRequestConfig
): Promise<AxiosResponse<GenreDto[]>> => {


  return axios.get(
    `/api/v1/genres`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}


export const getGetAll1QueryKey = (params?: GetAll1Params,) => {
  return [`/api/v1/genres`, ...(params ? [params] : [])] as const;
}


export const getGetAll1QueryOptions = <TData = Awaited<ReturnType<typeof getAll1>>, TError = AxiosError<unknown>>(params: GetAll1Params, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll1>>, TError, TData>>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAll1QueryKey(params);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll1>>> = ({ signal }) => getAll1(params, { signal, ...axiosOptions });





  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getAll1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAll1QueryResult = NonNullable<Awaited<ReturnType<typeof getAll1>>>
export type GetAll1QueryError = AxiosError<unknown>


export function useGetAll1<TData = Awaited<ReturnType<typeof getAll1>>, TError = AxiosError<unknown>>(
  params: GetAll1Params, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll1>>, TError, TData>> & Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAll1>>,
        TError,
        Awaited<ReturnType<typeof getAll1>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll1<TData = Awaited<ReturnType<typeof getAll1>>, TError = AxiosError<unknown>>(
  params: GetAll1Params, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll1>>, TError, TData>> & Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAll1>>,
        TError,
        Awaited<ReturnType<typeof getAll1>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll1<TData = Awaited<ReturnType<typeof getAll1>>, TError = AxiosError<unknown>>(
  params: GetAll1Params, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll1>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAll1<TData = Awaited<ReturnType<typeof getAll1>>, TError = AxiosError<unknown>>(
  params: GetAll1Params, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll1>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAll1QueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const create1 = (
  genreDto: GenreDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<GenreDto>> => {


  return axios.post(
    `/api/v1/genres`,
    genreDto, options
  );
}



export const getCreate1MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof create1>>, TError, { data: GenreDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof create1>>, TError, { data: GenreDto }, TContext> => {

  const mutationKey = ['create1'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof create1>>, { data: GenreDto }> = (props) => {
    const { data } = props ?? {};

    return create1(data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type Create1MutationResult = NonNullable<Awaited<ReturnType<typeof create1>>>
export type Create1MutationBody = GenreDto
export type Create1MutationError = AxiosError<unknown>

export const useCreate1 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof create1>>, TError, { data: GenreDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof create1>>,
      TError,
      { data: GenreDto },
      TContext
    > => {

  const mutationOptions = getCreate1MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const getAll2 = (
  params: GetAll2Params, options?: AxiosRequestConfig
): Promise<AxiosResponse<GameDto[]>> => {


  return axios.get(
    `/api/v1/games`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}


export const getGetAll2QueryKey = (params?: GetAll2Params,) => {
  return [`/api/v1/games`, ...(params ? [params] : [])] as const;
}


export const getGetAll2QueryOptions = <TData = Awaited<ReturnType<typeof getAll2>>, TError = AxiosError<unknown>>(params: GetAll2Params, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll2>>, TError, TData>>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAll2QueryKey(params);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll2>>> = ({ signal }) => getAll2(params, { signal, ...axiosOptions });





  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getAll2>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAll2QueryResult = NonNullable<Awaited<ReturnType<typeof getAll2>>>
export type GetAll2QueryError = AxiosError<unknown>


export function useGetAll2<TData = Awaited<ReturnType<typeof getAll2>>, TError = AxiosError<unknown>>(
  params: GetAll2Params, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll2>>, TError, TData>> & Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAll2>>,
        TError,
        Awaited<ReturnType<typeof getAll2>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll2<TData = Awaited<ReturnType<typeof getAll2>>, TError = AxiosError<unknown>>(
  params: GetAll2Params, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll2>>, TError, TData>> & Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAll2>>,
        TError,
        Awaited<ReturnType<typeof getAll2>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll2<TData = Awaited<ReturnType<typeof getAll2>>, TError = AxiosError<unknown>>(
  params: GetAll2Params, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll2>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAll2<TData = Awaited<ReturnType<typeof getAll2>>, TError = AxiosError<unknown>>(
  params: GetAll2Params, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll2>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAll2QueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const create2 = (
  gameDto: GameDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<GameDto>> => {


  return axios.post(
    `/api/v1/games`,
    gameDto, options
  );
}



export const getCreate2MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof create2>>, TError, { data: GameDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof create2>>, TError, { data: GameDto }, TContext> => {

  const mutationKey = ['create2'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof create2>>, { data: GameDto }> = (props) => {
    const { data } = props ?? {};

    return create2(data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type Create2MutationResult = NonNullable<Awaited<ReturnType<typeof create2>>>
export type Create2MutationBody = GameDto
export type Create2MutationError = AxiosError<unknown>

export const useCreate2 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof create2>>, TError, { data: GameDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof create2>>,
      TError,
      { data: GameDto },
      TContext
    > => {

  const mutationOptions = getCreate2MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

export const getAll3 = (
  params: GetAll3Params, options?: AxiosRequestConfig
): Promise<AxiosResponse<DeveloperDto[]>> => {


  return axios.get(
    `/api/v1/developers`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}


export const getGetAll3QueryKey = (params?: GetAll3Params,) => {
  return [`/api/v1/developers`, ...(params ? [params] : [])] as const;
}


export const getGetAll3QueryOptions = <TData = Awaited<ReturnType<typeof getAll3>>, TError = AxiosError<unknown>>(params: GetAll3Params, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll3>>, TError, TData>>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAll3QueryKey(params);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll3>>> = ({ signal }) => getAll3(params, { signal, ...axiosOptions });





  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getAll3>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAll3QueryResult = NonNullable<Awaited<ReturnType<typeof getAll3>>>
export type GetAll3QueryError = AxiosError<unknown>


export function useGetAll3<TData = Awaited<ReturnType<typeof getAll3>>, TError = AxiosError<unknown>>(
  params: GetAll3Params, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll3>>, TError, TData>> & Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAll3>>,
        TError,
        Awaited<ReturnType<typeof getAll3>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll3<TData = Awaited<ReturnType<typeof getAll3>>, TError = AxiosError<unknown>>(
  params: GetAll3Params, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll3>>, TError, TData>> & Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAll3>>,
        TError,
        Awaited<ReturnType<typeof getAll3>>
      >, 'initialData'
    >, axios?: AxiosRequestConfig
  }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll3<TData = Awaited<ReturnType<typeof getAll3>>, TError = AxiosError<unknown>>(
  params: GetAll3Params, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll3>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAll3<TData = Awaited<ReturnType<typeof getAll3>>, TError = AxiosError<unknown>>(
  params: GetAll3Params, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll3>>, TError, TData>>, axios?: AxiosRequestConfig }
  , queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAll3QueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const create3 = (
  developerDto: DeveloperDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<DeveloperDto>> => {


  return axios.post(
    `/api/v1/developers`,
    developerDto, options
  );
}



export const getCreate3MutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof create3>>, TError, { data: DeveloperDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof create3>>, TError, { data: DeveloperDto }, TContext> => {

  const mutationKey = ['create3'];
  const { mutation: mutationOptions, axios: axiosOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, axios: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof create3>>, { data: DeveloperDto }> = (props) => {
    const { data } = props ?? {};

    return create3(data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type Create3MutationResult = NonNullable<Awaited<ReturnType<typeof create3>>>
export type Create3MutationBody = DeveloperDto
export type Create3MutationError = AxiosError<unknown>

export const useCreate3 = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof create3>>, TError, { data: DeveloperDto }, TContext>, axios?: AxiosRequestConfig }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof create3>>,
      TError,
      { data: DeveloperDto },
      TContext
    > => {

  const mutationOptions = getCreate3MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

